
# アイスブレイクアプリ - ユーザー管理機能仕様書

## 概要

このアプリケーションは、チームメンバーを管理し、アイスブレイクセッションの当番を割り当てるためのユーザー管理機能を提供します。

## データベース構造

### Usersテーブル

| カラム名 | データ型 | 制約 | 説明 |
|---------|---------|-----|-----|
| id | integer | PRIMARY KEY | 自動増分ID |
| name | string | NOT NULL | ユーザー名 |
| email | string | NOT NULL, UNIQUE | メールアドレス |
| slack_id | string | NOT NULL, UNIQUE | Slack ID |
| vacation_start_date | date | NULL可 | 休暇開始日 |
| vacation_end_date | date | NULL可 | 休暇終了日 |
| created_at | datetime | NOT NULL | 作成日時 |
| updated_at | datetime | NOT NULL | 更新日時 |

### インデックス

- `email`カラムに一意インデックス

## モデル仕様

### バリデーション

- **name**: 必須入力
- **email**: 必須入力、重複不可、有効なメールアドレス形式
- **slack_id**: 必須入力、重複不可

### メソッド

- `on_vacation?`: 現在休暇中かどうかを判定
- `available_for_duty?`: 当番割り当て可能かどうかを判定（休暇中でない）
- `full_name`: フルネームを返す（現在はnameと同じ）

## コントローラー機能

### UsersController

#### アクション

1. **index**: 全ユーザー一覧表示
2. **show**: 個別ユーザー詳細表示
3. **new**: 新規ユーザー作成フォーム
4. **create**: 新規ユーザー作成処理
5. **edit**: ユーザー編集フォーム
6. **update**: ユーザー更新処理
7. **destroy**: ユーザー削除処理

#### パラメーター

許可されるパラメーター：
- name
- email
- slack_id
- vacation_start_date
- vacation_end_date

## ユーザーインターフェース

### 一覧画面（index）

- **表示形式**: カード形式のレイアウト
- **表示情報**:
  - ユーザー名
  - メールアドレス
  - Slack ID
  - 休暇中の場合：休暇期間表示
- **操作**:
  - 新規メンバー追加ボタン
  - 各ユーザーの詳細・編集・削除ボタン
- **空状態**: メンバーがいない場合の案内メッセージ

### 入力フォーム（new/edit）

- **必須フィールド**:
  - 名前
  - メールアドレス
  - Slack ID
- **オプションフィールド**:
  - 休暇開始日
  - 休暇終了日
- **バリデーション**: クライアントサイドでのBootstrap validation
- **ヘルプテキスト**: 各フィールドの説明

## ルーティング

```ruby
resources :users  # RESTfulルート
root "users#index"  # ルートパス
```

## 業務ルール

1. **休暇管理**:
   - 休暇期間設定により一時的に当番対象外
   - 休暇開始日・終了日の両方設定時に有効
   - 現在日付が休暇期間内の場合は「休暇中」として表示

2. **当番割り当て対象**:
   - 休暇中でないユーザー
   - `available_for_duty?`メソッドで判定

3. **データ整合性**:
   - メールアドレスとSlack IDの重複不可
   - 必須フィールドの入力チェック

## 通知・連携

- **Slack連携**: slack_idを使用してSlack通知を送信
- **メール通知**: emailアドレスを使用してメール通知を送信（将来的な機能）

## セキュリティ

- Strong Parametersによる許可パラメーターの制限
- データベースレベルでの制約によるデータ整合性保証
- 削除時の確認ダイアログ

## 今後の拡張予定

- ユーザー権限管理
- プロファイル画像のアップロード
- 部署・チーム分け機能
- 当番履歴の管理
- 通知設定の個別管理

# コーディングにおける注意事項
- MVP開発なのでテストコードは作成不要

# コーディングにおける注意事項
- MVP開発なのでテストコードは作成不要